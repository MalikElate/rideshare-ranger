[{"/Users/malik/Desktop/Programs/attempt3/src/index.tsx":"1","/Users/malik/Desktop/Programs/attempt3/src/reportWebVitals.ts":"2","/Users/malik/Desktop/Programs/attempt3/src/Components/App/App.tsx":"3","/Users/malik/Desktop/Programs/attempt3/src/Components/DayProfit/DayProfit.tsx":"4","/Users/malik/Desktop/Programs/attempt3/src/Components/WeeklyProfit/WeeklyProfit.tsx":"5","/Users/malik/Desktop/Programs/attempt3/src/Components/NavBar/NavBar.tsx":"6"},{"size":515,"mtime":1611894072720,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1611892208898,"results":"9","hashOfConfig":"8"},{"size":831,"mtime":1612578757775,"results":"10","hashOfConfig":"8"},{"size":5709,"mtime":1612578093742,"results":"11","hashOfConfig":"8"},{"size":310,"mtime":1612577682008,"results":"12","hashOfConfig":"8"},{"size":940,"mtime":1612581703463,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1v66z0r",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/malik/Desktop/Programs/attempt3/src/index.tsx",[],["30","31"],"/Users/malik/Desktop/Programs/attempt3/src/reportWebVitals.ts",[],"/Users/malik/Desktop/Programs/attempt3/src/Components/App/App.tsx",[],"/Users/malik/Desktop/Programs/attempt3/src/Components/DayProfit/DayProfit.tsx",["32"],"import React, {useState, useEffect} from 'react';\nimport { Slider } from '@material-ui/core';\nimport { WeeklyProfit } from \"../WeeklyProfit/WeeklyProfit\"; \n\ninterface Props { \n  companyName: string, \n}\n\nexport const DoorDash: React.FC<Props> = (props) => {\n  const [singleMiles, setSingleMiles] = useState<number>(0);\n  const [singlePay, setSinglePay] = useState<number>(0);\n  const [singleAdjustedPay, setSingleAdjustedPay] = useState<number>(0);\n  const [singleMessage, setSingleMessage] = useState<string>(\"\");\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    setMessageFunction(); \n  }, []);\n\n  const setMessageFunction = () => { \n    if ((0 < singleMiles) && (singleMiles <= 2)  && (singlePay > 4)){\n        setSingleMessage('Worth it!');\n    } else if ((0 >= singleMiles) && (singleMiles > 2)) {\n        setSingleMessage('This dash is a waste of time');\n        return \"end function\";\n     } else if ((2 < singleMiles) && (singleMiles <= 3)  && (singlePay > 6)){\n        setSingleMessage('Worth it!');\n        return \"end function\";\n      } else if ((2 >= singleMiles) && (singleMiles > 3)) {\n        setSingleMessage('This dash is a waste of time');   \n        return \"end function\";\n      } else if ((3 < singleMiles) && (singleMiles <= 4)  && (singlePay > 8)){\n        setSingleMessage('Worth it!');\n        return \"end function\";\n      } else if ((3 >= singleMiles) && (singleMiles > 4)) {\n        setSingleMessage('This dash is a waste of time');\n      } else if ((4 < singleMiles) && (singleMiles <= 5)  && (singlePay > 11)){\n        setSingleMessage('Worth it!');\n        return \"end function\";\n      } else if ((4 >= singleMiles) && (singleMiles > 5)) {\n        setSingleMessage('This dash is a waste of time');\n      } else if ((5 < singleMiles) && (singleMiles <= 6)  && (singlePay > 15)){\n        setSingleMessage('Worth it!');\n        return \"end function\";\n      } else if ((5 >= singleMiles) && (singleMiles > 6)) {\n        setSingleMessage('This dash is a waste of time');\n      } else if ((6 < singleMiles) && (singleMiles <= 7)  && (singlePay > 18)){\n        setSingleMessage('Worth it!');\n        return \"end function\";\n      } else if ((6 >= singleMiles) && (singleMiles > 7)) {\n        setSingleMessage('This dash is a waste of time');\n      } else if ((7 < singleMiles) && (singleMiles <= 9)  && (singlePay > 26)){\n        setSingleMessage('Worth it!');\n        return \"end function\";\n      } else if ((7 >= singleMiles) && (singleMiles > 9)) {\n        setSingleMessage('This dash is a waste of time');\n      } else if ((9 < singleMiles) && (singleMiles <= 12)  && (singlePay > 35)){\n        setSingleMessage('Worth it!');\n      return \"end function\";\n\n      } else if ((9 >= singleMiles) && (singleMiles > 12)) {\n        setSingleMessage('This dash is a waste of time');\n      } else if ((13 < singleMiles) && (singleMiles <= 16)  && (singlePay > 50)){\n        setSingleMessage('Worth it!');\n        return \"end function\";\n\n      } else if ((13 >= singleMiles) || (singleMiles > 16)) {\n        setSingleMessage('Waste of time');\n      } else if (16 < singleMiles) {\n        setSingleMessage('DoorDash does not assign dashes of this distance');\n      }\n  }\n  return (\n    <div>\n      <header>\n          <h1> {props.companyName} Profit Calculator </h1>\n      </header>\n      <h2> Single delivery profit </h2>\n      <p> Can't decide if a delivery is profitable? Use the {props.companyName} Calculator to find out </p>\n      <div>\n          <label>mi</label>\n          <input \n            placeholder=\"Number of miles\" \n            type=\"number\" \n            value={singleMiles || \"\"} \n            onChange={(e)=>setSingleMiles(Number(e.target.value))}\n          />\n      <Slider\n        defaultValue={0.00000005}\n        aria-labelledby=\"discrete-slider-small-steps\"\n        step={0.5}\n        marks\n        min={.5}\n        max={30}\n        value={singleMiles}\n        onChangeCommitted={(event: React.ChangeEvent<{}>, value: number | number[]) => {\n          setSingleMiles(Number(value)); \n          setSingleAdjustedPay(Number(Number(singlePay - (singleMiles/25 * 2.2)).toFixed(2)));\n          setMessageFunction();\n        }}\n        onChange={(event: React.ChangeEvent<{}>, value: number | number[]) => {\n          setSingleMiles(Number(value));\n          setSingleAdjustedPay(Number(Number(singlePay - (singleMiles/25 * 2.2)).toFixed(2)));\n          setMessageFunction();\n        }}\n        valueLabelDisplay=\"auto\"\n      />\n      </div>\n      <div>\n        <label>$</label>\n        <input \n          placeholder=\"singlePay\" \n          type=\"number\" \n          value={singlePay || \"\"} \n          onChange={(e)=>setSinglePay(Number(e.target.value))}\n        />\n        <Slider\n        defaultValue={0.00000005}\n        aria-labelledby=\"discrete-slider-small-steps\"\n        step={0.5}\n        marks\n        min={.5}\n        max={30}\n        value={singlePay}\n        onChangeCommitted={(event: React.ChangeEvent<{}>, value: number | number[]) => {\n          setSinglePay(Number(value));\n          setSingleAdjustedPay(Number(Number(singlePay - (singleMiles/25 * 2.2)).toFixed(2)));\n          setMessageFunction();\n        }}\n        onChange={(event: React.ChangeEvent<{}>, value: number | number[]) => {\n          setSinglePay(Number(value));\n          setSingleAdjustedPay(Number(Number(singlePay - (singleMiles/25 * 2.2)).toFixed(2)));\n          setMessageFunction();\n        }}\n        valueLabelDisplay=\"auto\"\n      />\n      </div>\n      <p>singlePay: ${singleAdjustedPay} Roundtrip time: {singleMiles>0? 15+singleMiles*6 : 0} minutes</p>\n      <p>{singleMessage}</p>\n      <WeeklyProfit singleProfits={singleAdjustedPay}/>\n    </div>\n  );\n}\n\n","/Users/malik/Desktop/Programs/attempt3/src/Components/WeeklyProfit/WeeklyProfit.tsx",["33"],"import React, {useState} from 'react';\n\ninterface Props { \n  singleProfits: number, \n}\n\nexport const WeeklyProfit: React.FC<Props> = (props) => {\n\n  return (\n    <div>\n      <header>\n          <h2> Hello from weekly profit </h2> \n          <p>${props.singleProfits * 10}</p>\n      </header>\n    </div>\n  );\n}\n\n","/Users/malik/Desktop/Programs/attempt3/src/Components/NavBar/NavBar.tsx",["34","35"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Nav.css'\n\nexport const NavBar: React.FC = () => {\n  const [open, setOpen] = React.useState(false); // used for the drawer opening and closing\n\n  return (\n    <header className='nav-header'>\n      <img src='../images/logo2.png' alt='logo' className='nav-logo'></img>\n      <Link className='nav-link' to='/doordash'>\n        <span className='icon-btn'>DoorDash</span>\n      </Link>\n      <Link className='nav-link' to='/uber-eats'>\n        <span className='icon-btn'>Uber Eats</span>\n      </Link>\n      <Link className='nav-link' to='/grubhub'>\n        <span className='icon-btn'>Grubhub</span>\n      </Link>\n      <Link className='nav-link' to='/postmates'>\n        <span className='icon-btn'>Postmates</span>\n      </Link>\n      <Link className='nav-link' to='/instacart'>\n        <span className='icon-btn'>Instacart</span>\n      </Link>\n    </header>\n  );\n}\n\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":18,"column":6,"nodeType":"42","endLine":18,"endColumn":8,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":16,"nodeType":"46","messageId":"47","endLine":1,"endColumn":24},{"ruleId":"44","severity":1,"message":"48","line":6,"column":10,"nodeType":"46","messageId":"47","endLine":6,"endColumn":14},{"ruleId":"44","severity":1,"message":"49","line":6,"column":16,"nodeType":"46","messageId":"47","endLine":6,"endColumn":23},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setMessageFunction'. Either include it or remove the dependency array.","ArrayExpression",["52"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Update the dependencies array to be: [setMessageFunction]",{"range":"55","text":"56"},[622,624],"[setMessageFunction]"]